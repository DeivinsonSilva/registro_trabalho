
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Trabalhador
 * 
 */
export type Trabalhador = $Result.DefaultSelection<Prisma.$TrabalhadorPayload>
/**
 * Model Fazenda
 * 
 */
export type Fazenda = $Result.DefaultSelection<Prisma.$FazendaPayload>
/**
 * Model Servico
 * 
 */
export type Servico = $Result.DefaultSelection<Prisma.$ServicoPayload>
/**
 * Model Registro
 * 
 */
export type Registro = $Result.DefaultSelection<Prisma.$RegistroPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Trabalhadors
 * const trabalhadors = await prisma.trabalhador.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Trabalhadors
   * const trabalhadors = await prisma.trabalhador.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.trabalhador`: Exposes CRUD operations for the **Trabalhador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trabalhadors
    * const trabalhadors = await prisma.trabalhador.findMany()
    * ```
    */
  get trabalhador(): Prisma.TrabalhadorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fazenda`: Exposes CRUD operations for the **Fazenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fazendas
    * const fazendas = await prisma.fazenda.findMany()
    * ```
    */
  get fazenda(): Prisma.FazendaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servico`: Exposes CRUD operations for the **Servico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicos
    * const servicos = await prisma.servico.findMany()
    * ```
    */
  get servico(): Prisma.ServicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registro`: Exposes CRUD operations for the **Registro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registros
    * const registros = await prisma.registro.findMany()
    * ```
    */
  get registro(): Prisma.RegistroDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Trabalhador: 'Trabalhador',
    Fazenda: 'Fazenda',
    Servico: 'Servico',
    Registro: 'Registro'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "trabalhador" | "fazenda" | "servico" | "registro"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Trabalhador: {
        payload: Prisma.$TrabalhadorPayload<ExtArgs>
        fields: Prisma.TrabalhadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrabalhadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrabalhadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          findFirst: {
            args: Prisma.TrabalhadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrabalhadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          findMany: {
            args: Prisma.TrabalhadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>[]
          }
          create: {
            args: Prisma.TrabalhadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          createMany: {
            args: Prisma.TrabalhadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrabalhadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>[]
          }
          delete: {
            args: Prisma.TrabalhadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          update: {
            args: Prisma.TrabalhadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          deleteMany: {
            args: Prisma.TrabalhadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrabalhadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrabalhadorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>[]
          }
          upsert: {
            args: Prisma.TrabalhadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabalhadorPayload>
          }
          aggregate: {
            args: Prisma.TrabalhadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrabalhador>
          }
          groupBy: {
            args: Prisma.TrabalhadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrabalhadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrabalhadorCountArgs<ExtArgs>
            result: $Utils.Optional<TrabalhadorCountAggregateOutputType> | number
          }
        }
      }
      Fazenda: {
        payload: Prisma.$FazendaPayload<ExtArgs>
        fields: Prisma.FazendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FazendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FazendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          findFirst: {
            args: Prisma.FazendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FazendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          findMany: {
            args: Prisma.FazendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>[]
          }
          create: {
            args: Prisma.FazendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          createMany: {
            args: Prisma.FazendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FazendaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>[]
          }
          delete: {
            args: Prisma.FazendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          update: {
            args: Prisma.FazendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          deleteMany: {
            args: Prisma.FazendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FazendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FazendaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>[]
          }
          upsert: {
            args: Prisma.FazendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FazendaPayload>
          }
          aggregate: {
            args: Prisma.FazendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFazenda>
          }
          groupBy: {
            args: Prisma.FazendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FazendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FazendaCountArgs<ExtArgs>
            result: $Utils.Optional<FazendaCountAggregateOutputType> | number
          }
        }
      }
      Servico: {
        payload: Prisma.$ServicoPayload<ExtArgs>
        fields: Prisma.ServicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          findFirst: {
            args: Prisma.ServicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          findMany: {
            args: Prisma.ServicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>[]
          }
          create: {
            args: Prisma.ServicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          createMany: {
            args: Prisma.ServicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>[]
          }
          delete: {
            args: Prisma.ServicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          update: {
            args: Prisma.ServicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          deleteMany: {
            args: Prisma.ServicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>[]
          }
          upsert: {
            args: Prisma.ServicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          aggregate: {
            args: Prisma.ServicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServico>
          }
          groupBy: {
            args: Prisma.ServicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicoCountArgs<ExtArgs>
            result: $Utils.Optional<ServicoCountAggregateOutputType> | number
          }
        }
      }
      Registro: {
        payload: Prisma.$RegistroPayload<ExtArgs>
        fields: Prisma.RegistroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findFirst: {
            args: Prisma.RegistroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findMany: {
            args: Prisma.RegistroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          create: {
            args: Prisma.RegistroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          createMany: {
            args: Prisma.RegistroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          delete: {
            args: Prisma.RegistroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          update: {
            args: Prisma.RegistroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          deleteMany: {
            args: Prisma.RegistroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegistroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          upsert: {
            args: Prisma.RegistroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          aggregate: {
            args: Prisma.RegistroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistro>
          }
          groupBy: {
            args: Prisma.RegistroGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistroGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistroCountArgs<ExtArgs>
            result: $Utils.Optional<RegistroCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    trabalhador?: TrabalhadorOmit
    fazenda?: FazendaOmit
    servico?: ServicoOmit
    registro?: RegistroOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TrabalhadorCountOutputType
   */

  export type TrabalhadorCountOutputType = {
    registros: number
  }

  export type TrabalhadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | TrabalhadorCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * TrabalhadorCountOutputType without action
   */
  export type TrabalhadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabalhadorCountOutputType
     */
    select?: TrabalhadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrabalhadorCountOutputType without action
   */
  export type TrabalhadorCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Count Type FazendaCountOutputType
   */

  export type FazendaCountOutputType = {
    registros: number
  }

  export type FazendaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | FazendaCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * FazendaCountOutputType without action
   */
  export type FazendaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FazendaCountOutputType
     */
    select?: FazendaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FazendaCountOutputType without action
   */
  export type FazendaCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Count Type ServicoCountOutputType
   */

  export type ServicoCountOutputType = {
    registros: number
  }

  export type ServicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | ServicoCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * ServicoCountOutputType without action
   */
  export type ServicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicoCountOutputType
     */
    select?: ServicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicoCountOutputType without action
   */
  export type ServicoCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Trabalhador
   */

  export type AggregateTrabalhador = {
    _count: TrabalhadorCountAggregateOutputType | null
    _avg: TrabalhadorAvgAggregateOutputType | null
    _sum: TrabalhadorSumAggregateOutputType | null
    _min: TrabalhadorMinAggregateOutputType | null
    _max: TrabalhadorMaxAggregateOutputType | null
  }

  export type TrabalhadorAvgAggregateOutputType = {
    id: number | null
  }

  export type TrabalhadorSumAggregateOutputType = {
    id: number | null
  }

  export type TrabalhadorMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type TrabalhadorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type TrabalhadorCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type TrabalhadorAvgAggregateInputType = {
    id?: true
  }

  export type TrabalhadorSumAggregateInputType = {
    id?: true
  }

  export type TrabalhadorMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type TrabalhadorMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type TrabalhadorCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type TrabalhadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trabalhador to aggregate.
     */
    where?: TrabalhadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trabalhadors to fetch.
     */
    orderBy?: TrabalhadorOrderByWithRelationInput | TrabalhadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrabalhadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trabalhadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trabalhadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trabalhadors
    **/
    _count?: true | TrabalhadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrabalhadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrabalhadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrabalhadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrabalhadorMaxAggregateInputType
  }

  export type GetTrabalhadorAggregateType<T extends TrabalhadorAggregateArgs> = {
        [P in keyof T & keyof AggregateTrabalhador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrabalhador[P]>
      : GetScalarType<T[P], AggregateTrabalhador[P]>
  }




  export type TrabalhadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrabalhadorWhereInput
    orderBy?: TrabalhadorOrderByWithAggregationInput | TrabalhadorOrderByWithAggregationInput[]
    by: TrabalhadorScalarFieldEnum[] | TrabalhadorScalarFieldEnum
    having?: TrabalhadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrabalhadorCountAggregateInputType | true
    _avg?: TrabalhadorAvgAggregateInputType
    _sum?: TrabalhadorSumAggregateInputType
    _min?: TrabalhadorMinAggregateInputType
    _max?: TrabalhadorMaxAggregateInputType
  }

  export type TrabalhadorGroupByOutputType = {
    id: number
    nome: string
    _count: TrabalhadorCountAggregateOutputType | null
    _avg: TrabalhadorAvgAggregateOutputType | null
    _sum: TrabalhadorSumAggregateOutputType | null
    _min: TrabalhadorMinAggregateOutputType | null
    _max: TrabalhadorMaxAggregateOutputType | null
  }

  type GetTrabalhadorGroupByPayload<T extends TrabalhadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrabalhadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrabalhadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrabalhadorGroupByOutputType[P]>
            : GetScalarType<T[P], TrabalhadorGroupByOutputType[P]>
        }
      >
    >


  export type TrabalhadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    registros?: boolean | Trabalhador$registrosArgs<ExtArgs>
    _count?: boolean | TrabalhadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trabalhador"]>

  export type TrabalhadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["trabalhador"]>

  export type TrabalhadorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["trabalhador"]>

  export type TrabalhadorSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type TrabalhadorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["trabalhador"]>
  export type TrabalhadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Trabalhador$registrosArgs<ExtArgs>
    _count?: boolean | TrabalhadorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrabalhadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TrabalhadorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TrabalhadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trabalhador"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["trabalhador"]>
    composites: {}
  }

  type TrabalhadorGetPayload<S extends boolean | null | undefined | TrabalhadorDefaultArgs> = $Result.GetResult<Prisma.$TrabalhadorPayload, S>

  type TrabalhadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrabalhadorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrabalhadorCountAggregateInputType | true
    }

  export interface TrabalhadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trabalhador'], meta: { name: 'Trabalhador' } }
    /**
     * Find zero or one Trabalhador that matches the filter.
     * @param {TrabalhadorFindUniqueArgs} args - Arguments to find a Trabalhador
     * @example
     * // Get one Trabalhador
     * const trabalhador = await prisma.trabalhador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrabalhadorFindUniqueArgs>(args: SelectSubset<T, TrabalhadorFindUniqueArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trabalhador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrabalhadorFindUniqueOrThrowArgs} args - Arguments to find a Trabalhador
     * @example
     * // Get one Trabalhador
     * const trabalhador = await prisma.trabalhador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrabalhadorFindUniqueOrThrowArgs>(args: SelectSubset<T, TrabalhadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trabalhador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorFindFirstArgs} args - Arguments to find a Trabalhador
     * @example
     * // Get one Trabalhador
     * const trabalhador = await prisma.trabalhador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrabalhadorFindFirstArgs>(args?: SelectSubset<T, TrabalhadorFindFirstArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trabalhador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorFindFirstOrThrowArgs} args - Arguments to find a Trabalhador
     * @example
     * // Get one Trabalhador
     * const trabalhador = await prisma.trabalhador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrabalhadorFindFirstOrThrowArgs>(args?: SelectSubset<T, TrabalhadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trabalhadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trabalhadors
     * const trabalhadors = await prisma.trabalhador.findMany()
     * 
     * // Get first 10 Trabalhadors
     * const trabalhadors = await prisma.trabalhador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trabalhadorWithIdOnly = await prisma.trabalhador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrabalhadorFindManyArgs>(args?: SelectSubset<T, TrabalhadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trabalhador.
     * @param {TrabalhadorCreateArgs} args - Arguments to create a Trabalhador.
     * @example
     * // Create one Trabalhador
     * const Trabalhador = await prisma.trabalhador.create({
     *   data: {
     *     // ... data to create a Trabalhador
     *   }
     * })
     * 
     */
    create<T extends TrabalhadorCreateArgs>(args: SelectSubset<T, TrabalhadorCreateArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trabalhadors.
     * @param {TrabalhadorCreateManyArgs} args - Arguments to create many Trabalhadors.
     * @example
     * // Create many Trabalhadors
     * const trabalhador = await prisma.trabalhador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrabalhadorCreateManyArgs>(args?: SelectSubset<T, TrabalhadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trabalhadors and returns the data saved in the database.
     * @param {TrabalhadorCreateManyAndReturnArgs} args - Arguments to create many Trabalhadors.
     * @example
     * // Create many Trabalhadors
     * const trabalhador = await prisma.trabalhador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trabalhadors and only return the `id`
     * const trabalhadorWithIdOnly = await prisma.trabalhador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrabalhadorCreateManyAndReturnArgs>(args?: SelectSubset<T, TrabalhadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trabalhador.
     * @param {TrabalhadorDeleteArgs} args - Arguments to delete one Trabalhador.
     * @example
     * // Delete one Trabalhador
     * const Trabalhador = await prisma.trabalhador.delete({
     *   where: {
     *     // ... filter to delete one Trabalhador
     *   }
     * })
     * 
     */
    delete<T extends TrabalhadorDeleteArgs>(args: SelectSubset<T, TrabalhadorDeleteArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trabalhador.
     * @param {TrabalhadorUpdateArgs} args - Arguments to update one Trabalhador.
     * @example
     * // Update one Trabalhador
     * const trabalhador = await prisma.trabalhador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrabalhadorUpdateArgs>(args: SelectSubset<T, TrabalhadorUpdateArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trabalhadors.
     * @param {TrabalhadorDeleteManyArgs} args - Arguments to filter Trabalhadors to delete.
     * @example
     * // Delete a few Trabalhadors
     * const { count } = await prisma.trabalhador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrabalhadorDeleteManyArgs>(args?: SelectSubset<T, TrabalhadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trabalhadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trabalhadors
     * const trabalhador = await prisma.trabalhador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrabalhadorUpdateManyArgs>(args: SelectSubset<T, TrabalhadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trabalhadors and returns the data updated in the database.
     * @param {TrabalhadorUpdateManyAndReturnArgs} args - Arguments to update many Trabalhadors.
     * @example
     * // Update many Trabalhadors
     * const trabalhador = await prisma.trabalhador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trabalhadors and only return the `id`
     * const trabalhadorWithIdOnly = await prisma.trabalhador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrabalhadorUpdateManyAndReturnArgs>(args: SelectSubset<T, TrabalhadorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trabalhador.
     * @param {TrabalhadorUpsertArgs} args - Arguments to update or create a Trabalhador.
     * @example
     * // Update or create a Trabalhador
     * const trabalhador = await prisma.trabalhador.upsert({
     *   create: {
     *     // ... data to create a Trabalhador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trabalhador we want to update
     *   }
     * })
     */
    upsert<T extends TrabalhadorUpsertArgs>(args: SelectSubset<T, TrabalhadorUpsertArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trabalhadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorCountArgs} args - Arguments to filter Trabalhadors to count.
     * @example
     * // Count the number of Trabalhadors
     * const count = await prisma.trabalhador.count({
     *   where: {
     *     // ... the filter for the Trabalhadors we want to count
     *   }
     * })
    **/
    count<T extends TrabalhadorCountArgs>(
      args?: Subset<T, TrabalhadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrabalhadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trabalhador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrabalhadorAggregateArgs>(args: Subset<T, TrabalhadorAggregateArgs>): Prisma.PrismaPromise<GetTrabalhadorAggregateType<T>>

    /**
     * Group by Trabalhador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabalhadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrabalhadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrabalhadorGroupByArgs['orderBy'] }
        : { orderBy?: TrabalhadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrabalhadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrabalhadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trabalhador model
   */
  readonly fields: TrabalhadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trabalhador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrabalhadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends Trabalhador$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Trabalhador$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trabalhador model
   */
  interface TrabalhadorFieldRefs {
    readonly id: FieldRef<"Trabalhador", 'Int'>
    readonly nome: FieldRef<"Trabalhador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Trabalhador findUnique
   */
  export type TrabalhadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter, which Trabalhador to fetch.
     */
    where: TrabalhadorWhereUniqueInput
  }

  /**
   * Trabalhador findUniqueOrThrow
   */
  export type TrabalhadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter, which Trabalhador to fetch.
     */
    where: TrabalhadorWhereUniqueInput
  }

  /**
   * Trabalhador findFirst
   */
  export type TrabalhadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter, which Trabalhador to fetch.
     */
    where?: TrabalhadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trabalhadors to fetch.
     */
    orderBy?: TrabalhadorOrderByWithRelationInput | TrabalhadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trabalhadors.
     */
    cursor?: TrabalhadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trabalhadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trabalhadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trabalhadors.
     */
    distinct?: TrabalhadorScalarFieldEnum | TrabalhadorScalarFieldEnum[]
  }

  /**
   * Trabalhador findFirstOrThrow
   */
  export type TrabalhadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter, which Trabalhador to fetch.
     */
    where?: TrabalhadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trabalhadors to fetch.
     */
    orderBy?: TrabalhadorOrderByWithRelationInput | TrabalhadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trabalhadors.
     */
    cursor?: TrabalhadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trabalhadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trabalhadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trabalhadors.
     */
    distinct?: TrabalhadorScalarFieldEnum | TrabalhadorScalarFieldEnum[]
  }

  /**
   * Trabalhador findMany
   */
  export type TrabalhadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter, which Trabalhadors to fetch.
     */
    where?: TrabalhadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trabalhadors to fetch.
     */
    orderBy?: TrabalhadorOrderByWithRelationInput | TrabalhadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trabalhadors.
     */
    cursor?: TrabalhadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trabalhadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trabalhadors.
     */
    skip?: number
    distinct?: TrabalhadorScalarFieldEnum | TrabalhadorScalarFieldEnum[]
  }

  /**
   * Trabalhador create
   */
  export type TrabalhadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Trabalhador.
     */
    data: XOR<TrabalhadorCreateInput, TrabalhadorUncheckedCreateInput>
  }

  /**
   * Trabalhador createMany
   */
  export type TrabalhadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trabalhadors.
     */
    data: TrabalhadorCreateManyInput | TrabalhadorCreateManyInput[]
  }

  /**
   * Trabalhador createManyAndReturn
   */
  export type TrabalhadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * The data used to create many Trabalhadors.
     */
    data: TrabalhadorCreateManyInput | TrabalhadorCreateManyInput[]
  }

  /**
   * Trabalhador update
   */
  export type TrabalhadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Trabalhador.
     */
    data: XOR<TrabalhadorUpdateInput, TrabalhadorUncheckedUpdateInput>
    /**
     * Choose, which Trabalhador to update.
     */
    where: TrabalhadorWhereUniqueInput
  }

  /**
   * Trabalhador updateMany
   */
  export type TrabalhadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trabalhadors.
     */
    data: XOR<TrabalhadorUpdateManyMutationInput, TrabalhadorUncheckedUpdateManyInput>
    /**
     * Filter which Trabalhadors to update
     */
    where?: TrabalhadorWhereInput
    /**
     * Limit how many Trabalhadors to update.
     */
    limit?: number
  }

  /**
   * Trabalhador updateManyAndReturn
   */
  export type TrabalhadorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * The data used to update Trabalhadors.
     */
    data: XOR<TrabalhadorUpdateManyMutationInput, TrabalhadorUncheckedUpdateManyInput>
    /**
     * Filter which Trabalhadors to update
     */
    where?: TrabalhadorWhereInput
    /**
     * Limit how many Trabalhadors to update.
     */
    limit?: number
  }

  /**
   * Trabalhador upsert
   */
  export type TrabalhadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Trabalhador to update in case it exists.
     */
    where: TrabalhadorWhereUniqueInput
    /**
     * In case the Trabalhador found by the `where` argument doesn't exist, create a new Trabalhador with this data.
     */
    create: XOR<TrabalhadorCreateInput, TrabalhadorUncheckedCreateInput>
    /**
     * In case the Trabalhador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrabalhadorUpdateInput, TrabalhadorUncheckedUpdateInput>
  }

  /**
   * Trabalhador delete
   */
  export type TrabalhadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
    /**
     * Filter which Trabalhador to delete.
     */
    where: TrabalhadorWhereUniqueInput
  }

  /**
   * Trabalhador deleteMany
   */
  export type TrabalhadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trabalhadors to delete
     */
    where?: TrabalhadorWhereInput
    /**
     * Limit how many Trabalhadors to delete.
     */
    limit?: number
  }

  /**
   * Trabalhador.registros
   */
  export type Trabalhador$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Trabalhador without action
   */
  export type TrabalhadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trabalhador
     */
    select?: TrabalhadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trabalhador
     */
    omit?: TrabalhadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabalhadorInclude<ExtArgs> | null
  }


  /**
   * Model Fazenda
   */

  export type AggregateFazenda = {
    _count: FazendaCountAggregateOutputType | null
    _avg: FazendaAvgAggregateOutputType | null
    _sum: FazendaSumAggregateOutputType | null
    _min: FazendaMinAggregateOutputType | null
    _max: FazendaMaxAggregateOutputType | null
  }

  export type FazendaAvgAggregateOutputType = {
    id: number | null
  }

  export type FazendaSumAggregateOutputType = {
    id: number | null
  }

  export type FazendaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type FazendaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type FazendaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type FazendaAvgAggregateInputType = {
    id?: true
  }

  export type FazendaSumAggregateInputType = {
    id?: true
  }

  export type FazendaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type FazendaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type FazendaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type FazendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fazenda to aggregate.
     */
    where?: FazendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fazendas to fetch.
     */
    orderBy?: FazendaOrderByWithRelationInput | FazendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FazendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fazendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fazendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fazendas
    **/
    _count?: true | FazendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FazendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FazendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FazendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FazendaMaxAggregateInputType
  }

  export type GetFazendaAggregateType<T extends FazendaAggregateArgs> = {
        [P in keyof T & keyof AggregateFazenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFazenda[P]>
      : GetScalarType<T[P], AggregateFazenda[P]>
  }




  export type FazendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FazendaWhereInput
    orderBy?: FazendaOrderByWithAggregationInput | FazendaOrderByWithAggregationInput[]
    by: FazendaScalarFieldEnum[] | FazendaScalarFieldEnum
    having?: FazendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FazendaCountAggregateInputType | true
    _avg?: FazendaAvgAggregateInputType
    _sum?: FazendaSumAggregateInputType
    _min?: FazendaMinAggregateInputType
    _max?: FazendaMaxAggregateInputType
  }

  export type FazendaGroupByOutputType = {
    id: number
    nome: string
    _count: FazendaCountAggregateOutputType | null
    _avg: FazendaAvgAggregateOutputType | null
    _sum: FazendaSumAggregateOutputType | null
    _min: FazendaMinAggregateOutputType | null
    _max: FazendaMaxAggregateOutputType | null
  }

  type GetFazendaGroupByPayload<T extends FazendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FazendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FazendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FazendaGroupByOutputType[P]>
            : GetScalarType<T[P], FazendaGroupByOutputType[P]>
        }
      >
    >


  export type FazendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    registros?: boolean | Fazenda$registrosArgs<ExtArgs>
    _count?: boolean | FazendaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fazenda"]>

  export type FazendaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["fazenda"]>

  export type FazendaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["fazenda"]>

  export type FazendaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type FazendaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["fazenda"]>
  export type FazendaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Fazenda$registrosArgs<ExtArgs>
    _count?: boolean | FazendaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FazendaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FazendaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FazendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fazenda"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["fazenda"]>
    composites: {}
  }

  type FazendaGetPayload<S extends boolean | null | undefined | FazendaDefaultArgs> = $Result.GetResult<Prisma.$FazendaPayload, S>

  type FazendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FazendaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FazendaCountAggregateInputType | true
    }

  export interface FazendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fazenda'], meta: { name: 'Fazenda' } }
    /**
     * Find zero or one Fazenda that matches the filter.
     * @param {FazendaFindUniqueArgs} args - Arguments to find a Fazenda
     * @example
     * // Get one Fazenda
     * const fazenda = await prisma.fazenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FazendaFindUniqueArgs>(args: SelectSubset<T, FazendaFindUniqueArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Fazenda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FazendaFindUniqueOrThrowArgs} args - Arguments to find a Fazenda
     * @example
     * // Get one Fazenda
     * const fazenda = await prisma.fazenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FazendaFindUniqueOrThrowArgs>(args: SelectSubset<T, FazendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fazenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaFindFirstArgs} args - Arguments to find a Fazenda
     * @example
     * // Get one Fazenda
     * const fazenda = await prisma.fazenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FazendaFindFirstArgs>(args?: SelectSubset<T, FazendaFindFirstArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fazenda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaFindFirstOrThrowArgs} args - Arguments to find a Fazenda
     * @example
     * // Get one Fazenda
     * const fazenda = await prisma.fazenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FazendaFindFirstOrThrowArgs>(args?: SelectSubset<T, FazendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Fazendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fazendas
     * const fazendas = await prisma.fazenda.findMany()
     * 
     * // Get first 10 Fazendas
     * const fazendas = await prisma.fazenda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fazendaWithIdOnly = await prisma.fazenda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FazendaFindManyArgs>(args?: SelectSubset<T, FazendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Fazenda.
     * @param {FazendaCreateArgs} args - Arguments to create a Fazenda.
     * @example
     * // Create one Fazenda
     * const Fazenda = await prisma.fazenda.create({
     *   data: {
     *     // ... data to create a Fazenda
     *   }
     * })
     * 
     */
    create<T extends FazendaCreateArgs>(args: SelectSubset<T, FazendaCreateArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Fazendas.
     * @param {FazendaCreateManyArgs} args - Arguments to create many Fazendas.
     * @example
     * // Create many Fazendas
     * const fazenda = await prisma.fazenda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FazendaCreateManyArgs>(args?: SelectSubset<T, FazendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fazendas and returns the data saved in the database.
     * @param {FazendaCreateManyAndReturnArgs} args - Arguments to create many Fazendas.
     * @example
     * // Create many Fazendas
     * const fazenda = await prisma.fazenda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fazendas and only return the `id`
     * const fazendaWithIdOnly = await prisma.fazenda.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FazendaCreateManyAndReturnArgs>(args?: SelectSubset<T, FazendaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Fazenda.
     * @param {FazendaDeleteArgs} args - Arguments to delete one Fazenda.
     * @example
     * // Delete one Fazenda
     * const Fazenda = await prisma.fazenda.delete({
     *   where: {
     *     // ... filter to delete one Fazenda
     *   }
     * })
     * 
     */
    delete<T extends FazendaDeleteArgs>(args: SelectSubset<T, FazendaDeleteArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Fazenda.
     * @param {FazendaUpdateArgs} args - Arguments to update one Fazenda.
     * @example
     * // Update one Fazenda
     * const fazenda = await prisma.fazenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FazendaUpdateArgs>(args: SelectSubset<T, FazendaUpdateArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Fazendas.
     * @param {FazendaDeleteManyArgs} args - Arguments to filter Fazendas to delete.
     * @example
     * // Delete a few Fazendas
     * const { count } = await prisma.fazenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FazendaDeleteManyArgs>(args?: SelectSubset<T, FazendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fazendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fazendas
     * const fazenda = await prisma.fazenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FazendaUpdateManyArgs>(args: SelectSubset<T, FazendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fazendas and returns the data updated in the database.
     * @param {FazendaUpdateManyAndReturnArgs} args - Arguments to update many Fazendas.
     * @example
     * // Update many Fazendas
     * const fazenda = await prisma.fazenda.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Fazendas and only return the `id`
     * const fazendaWithIdOnly = await prisma.fazenda.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FazendaUpdateManyAndReturnArgs>(args: SelectSubset<T, FazendaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Fazenda.
     * @param {FazendaUpsertArgs} args - Arguments to update or create a Fazenda.
     * @example
     * // Update or create a Fazenda
     * const fazenda = await prisma.fazenda.upsert({
     *   create: {
     *     // ... data to create a Fazenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fazenda we want to update
     *   }
     * })
     */
    upsert<T extends FazendaUpsertArgs>(args: SelectSubset<T, FazendaUpsertArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Fazendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaCountArgs} args - Arguments to filter Fazendas to count.
     * @example
     * // Count the number of Fazendas
     * const count = await prisma.fazenda.count({
     *   where: {
     *     // ... the filter for the Fazendas we want to count
     *   }
     * })
    **/
    count<T extends FazendaCountArgs>(
      args?: Subset<T, FazendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FazendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fazenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FazendaAggregateArgs>(args: Subset<T, FazendaAggregateArgs>): Prisma.PrismaPromise<GetFazendaAggregateType<T>>

    /**
     * Group by Fazenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FazendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FazendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FazendaGroupByArgs['orderBy'] }
        : { orderBy?: FazendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FazendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFazendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fazenda model
   */
  readonly fields: FazendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fazenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FazendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends Fazenda$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Fazenda$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fazenda model
   */
  interface FazendaFieldRefs {
    readonly id: FieldRef<"Fazenda", 'Int'>
    readonly nome: FieldRef<"Fazenda", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fazenda findUnique
   */
  export type FazendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter, which Fazenda to fetch.
     */
    where: FazendaWhereUniqueInput
  }

  /**
   * Fazenda findUniqueOrThrow
   */
  export type FazendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter, which Fazenda to fetch.
     */
    where: FazendaWhereUniqueInput
  }

  /**
   * Fazenda findFirst
   */
  export type FazendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter, which Fazenda to fetch.
     */
    where?: FazendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fazendas to fetch.
     */
    orderBy?: FazendaOrderByWithRelationInput | FazendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fazendas.
     */
    cursor?: FazendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fazendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fazendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fazendas.
     */
    distinct?: FazendaScalarFieldEnum | FazendaScalarFieldEnum[]
  }

  /**
   * Fazenda findFirstOrThrow
   */
  export type FazendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter, which Fazenda to fetch.
     */
    where?: FazendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fazendas to fetch.
     */
    orderBy?: FazendaOrderByWithRelationInput | FazendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fazendas.
     */
    cursor?: FazendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fazendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fazendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fazendas.
     */
    distinct?: FazendaScalarFieldEnum | FazendaScalarFieldEnum[]
  }

  /**
   * Fazenda findMany
   */
  export type FazendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter, which Fazendas to fetch.
     */
    where?: FazendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fazendas to fetch.
     */
    orderBy?: FazendaOrderByWithRelationInput | FazendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fazendas.
     */
    cursor?: FazendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fazendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fazendas.
     */
    skip?: number
    distinct?: FazendaScalarFieldEnum | FazendaScalarFieldEnum[]
  }

  /**
   * Fazenda create
   */
  export type FazendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * The data needed to create a Fazenda.
     */
    data: XOR<FazendaCreateInput, FazendaUncheckedCreateInput>
  }

  /**
   * Fazenda createMany
   */
  export type FazendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fazendas.
     */
    data: FazendaCreateManyInput | FazendaCreateManyInput[]
  }

  /**
   * Fazenda createManyAndReturn
   */
  export type FazendaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * The data used to create many Fazendas.
     */
    data: FazendaCreateManyInput | FazendaCreateManyInput[]
  }

  /**
   * Fazenda update
   */
  export type FazendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * The data needed to update a Fazenda.
     */
    data: XOR<FazendaUpdateInput, FazendaUncheckedUpdateInput>
    /**
     * Choose, which Fazenda to update.
     */
    where: FazendaWhereUniqueInput
  }

  /**
   * Fazenda updateMany
   */
  export type FazendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fazendas.
     */
    data: XOR<FazendaUpdateManyMutationInput, FazendaUncheckedUpdateManyInput>
    /**
     * Filter which Fazendas to update
     */
    where?: FazendaWhereInput
    /**
     * Limit how many Fazendas to update.
     */
    limit?: number
  }

  /**
   * Fazenda updateManyAndReturn
   */
  export type FazendaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * The data used to update Fazendas.
     */
    data: XOR<FazendaUpdateManyMutationInput, FazendaUncheckedUpdateManyInput>
    /**
     * Filter which Fazendas to update
     */
    where?: FazendaWhereInput
    /**
     * Limit how many Fazendas to update.
     */
    limit?: number
  }

  /**
   * Fazenda upsert
   */
  export type FazendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * The filter to search for the Fazenda to update in case it exists.
     */
    where: FazendaWhereUniqueInput
    /**
     * In case the Fazenda found by the `where` argument doesn't exist, create a new Fazenda with this data.
     */
    create: XOR<FazendaCreateInput, FazendaUncheckedCreateInput>
    /**
     * In case the Fazenda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FazendaUpdateInput, FazendaUncheckedUpdateInput>
  }

  /**
   * Fazenda delete
   */
  export type FazendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
    /**
     * Filter which Fazenda to delete.
     */
    where: FazendaWhereUniqueInput
  }

  /**
   * Fazenda deleteMany
   */
  export type FazendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fazendas to delete
     */
    where?: FazendaWhereInput
    /**
     * Limit how many Fazendas to delete.
     */
    limit?: number
  }

  /**
   * Fazenda.registros
   */
  export type Fazenda$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Fazenda without action
   */
  export type FazendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fazenda
     */
    select?: FazendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fazenda
     */
    omit?: FazendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FazendaInclude<ExtArgs> | null
  }


  /**
   * Model Servico
   */

  export type AggregateServico = {
    _count: ServicoCountAggregateOutputType | null
    _avg: ServicoAvgAggregateOutputType | null
    _sum: ServicoSumAggregateOutputType | null
    _min: ServicoMinAggregateOutputType | null
    _max: ServicoMaxAggregateOutputType | null
  }

  export type ServicoAvgAggregateOutputType = {
    id: number | null
  }

  export type ServicoSumAggregateOutputType = {
    id: number | null
  }

  export type ServicoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ServicoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ServicoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type ServicoAvgAggregateInputType = {
    id?: true
  }

  export type ServicoSumAggregateInputType = {
    id?: true
  }

  export type ServicoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ServicoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ServicoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type ServicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servico to aggregate.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicos
    **/
    _count?: true | ServicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicoMaxAggregateInputType
  }

  export type GetServicoAggregateType<T extends ServicoAggregateArgs> = {
        [P in keyof T & keyof AggregateServico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServico[P]>
      : GetScalarType<T[P], AggregateServico[P]>
  }




  export type ServicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicoWhereInput
    orderBy?: ServicoOrderByWithAggregationInput | ServicoOrderByWithAggregationInput[]
    by: ServicoScalarFieldEnum[] | ServicoScalarFieldEnum
    having?: ServicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicoCountAggregateInputType | true
    _avg?: ServicoAvgAggregateInputType
    _sum?: ServicoSumAggregateInputType
    _min?: ServicoMinAggregateInputType
    _max?: ServicoMaxAggregateInputType
  }

  export type ServicoGroupByOutputType = {
    id: number
    nome: string
    _count: ServicoCountAggregateOutputType | null
    _avg: ServicoAvgAggregateOutputType | null
    _sum: ServicoSumAggregateOutputType | null
    _min: ServicoMinAggregateOutputType | null
    _max: ServicoMaxAggregateOutputType | null
  }

  type GetServicoGroupByPayload<T extends ServicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicoGroupByOutputType[P]>
            : GetScalarType<T[P], ServicoGroupByOutputType[P]>
        }
      >
    >


  export type ServicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    registros?: boolean | Servico$registrosArgs<ExtArgs>
    _count?: boolean | ServicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servico"]>

  export type ServicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["servico"]>

  export type ServicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["servico"]>

  export type ServicoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type ServicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["servico"]>
  export type ServicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Servico$registrosArgs<ExtArgs>
    _count?: boolean | ServicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servico"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["servico"]>
    composites: {}
  }

  type ServicoGetPayload<S extends boolean | null | undefined | ServicoDefaultArgs> = $Result.GetResult<Prisma.$ServicoPayload, S>

  type ServicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicoCountAggregateInputType | true
    }

  export interface ServicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servico'], meta: { name: 'Servico' } }
    /**
     * Find zero or one Servico that matches the filter.
     * @param {ServicoFindUniqueArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicoFindUniqueArgs>(args: SelectSubset<T, ServicoFindUniqueArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Servico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicoFindUniqueOrThrowArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicoFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindFirstArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicoFindFirstArgs>(args?: SelectSubset<T, ServicoFindFirstArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindFirstOrThrowArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicoFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Servicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicos
     * const servicos = await prisma.servico.findMany()
     * 
     * // Get first 10 Servicos
     * const servicos = await prisma.servico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicoWithIdOnly = await prisma.servico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicoFindManyArgs>(args?: SelectSubset<T, ServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Servico.
     * @param {ServicoCreateArgs} args - Arguments to create a Servico.
     * @example
     * // Create one Servico
     * const Servico = await prisma.servico.create({
     *   data: {
     *     // ... data to create a Servico
     *   }
     * })
     * 
     */
    create<T extends ServicoCreateArgs>(args: SelectSubset<T, ServicoCreateArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Servicos.
     * @param {ServicoCreateManyArgs} args - Arguments to create many Servicos.
     * @example
     * // Create many Servicos
     * const servico = await prisma.servico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicoCreateManyArgs>(args?: SelectSubset<T, ServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servicos and returns the data saved in the database.
     * @param {ServicoCreateManyAndReturnArgs} args - Arguments to create many Servicos.
     * @example
     * // Create many Servicos
     * const servico = await prisma.servico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servicos and only return the `id`
     * const servicoWithIdOnly = await prisma.servico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicoCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Servico.
     * @param {ServicoDeleteArgs} args - Arguments to delete one Servico.
     * @example
     * // Delete one Servico
     * const Servico = await prisma.servico.delete({
     *   where: {
     *     // ... filter to delete one Servico
     *   }
     * })
     * 
     */
    delete<T extends ServicoDeleteArgs>(args: SelectSubset<T, ServicoDeleteArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Servico.
     * @param {ServicoUpdateArgs} args - Arguments to update one Servico.
     * @example
     * // Update one Servico
     * const servico = await prisma.servico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicoUpdateArgs>(args: SelectSubset<T, ServicoUpdateArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Servicos.
     * @param {ServicoDeleteManyArgs} args - Arguments to filter Servicos to delete.
     * @example
     * // Delete a few Servicos
     * const { count } = await prisma.servico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicoDeleteManyArgs>(args?: SelectSubset<T, ServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicos
     * const servico = await prisma.servico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicoUpdateManyArgs>(args: SelectSubset<T, ServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicos and returns the data updated in the database.
     * @param {ServicoUpdateManyAndReturnArgs} args - Arguments to update many Servicos.
     * @example
     * // Update many Servicos
     * const servico = await prisma.servico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Servicos and only return the `id`
     * const servicoWithIdOnly = await prisma.servico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServicoUpdateManyAndReturnArgs>(args: SelectSubset<T, ServicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Servico.
     * @param {ServicoUpsertArgs} args - Arguments to update or create a Servico.
     * @example
     * // Update or create a Servico
     * const servico = await prisma.servico.upsert({
     *   create: {
     *     // ... data to create a Servico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servico we want to update
     *   }
     * })
     */
    upsert<T extends ServicoUpsertArgs>(args: SelectSubset<T, ServicoUpsertArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoCountArgs} args - Arguments to filter Servicos to count.
     * @example
     * // Count the number of Servicos
     * const count = await prisma.servico.count({
     *   where: {
     *     // ... the filter for the Servicos we want to count
     *   }
     * })
    **/
    count<T extends ServicoCountArgs>(
      args?: Subset<T, ServicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicoAggregateArgs>(args: Subset<T, ServicoAggregateArgs>): Prisma.PrismaPromise<GetServicoAggregateType<T>>

    /**
     * Group by Servico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicoGroupByArgs['orderBy'] }
        : { orderBy?: ServicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servico model
   */
  readonly fields: ServicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends Servico$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Servico$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servico model
   */
  interface ServicoFieldRefs {
    readonly id: FieldRef<"Servico", 'Int'>
    readonly nome: FieldRef<"Servico", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Servico findUnique
   */
  export type ServicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico findUniqueOrThrow
   */
  export type ServicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico findFirst
   */
  export type ServicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico findFirstOrThrow
   */
  export type ServicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico findMany
   */
  export type ServicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico create
   */
  export type ServicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The data needed to create a Servico.
     */
    data: XOR<ServicoCreateInput, ServicoUncheckedCreateInput>
  }

  /**
   * Servico createMany
   */
  export type ServicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicos.
     */
    data: ServicoCreateManyInput | ServicoCreateManyInput[]
  }

  /**
   * Servico createManyAndReturn
   */
  export type ServicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * The data used to create many Servicos.
     */
    data: ServicoCreateManyInput | ServicoCreateManyInput[]
  }

  /**
   * Servico update
   */
  export type ServicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The data needed to update a Servico.
     */
    data: XOR<ServicoUpdateInput, ServicoUncheckedUpdateInput>
    /**
     * Choose, which Servico to update.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico updateMany
   */
  export type ServicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicos.
     */
    data: XOR<ServicoUpdateManyMutationInput, ServicoUncheckedUpdateManyInput>
    /**
     * Filter which Servicos to update
     */
    where?: ServicoWhereInput
    /**
     * Limit how many Servicos to update.
     */
    limit?: number
  }

  /**
   * Servico updateManyAndReturn
   */
  export type ServicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * The data used to update Servicos.
     */
    data: XOR<ServicoUpdateManyMutationInput, ServicoUncheckedUpdateManyInput>
    /**
     * Filter which Servicos to update
     */
    where?: ServicoWhereInput
    /**
     * Limit how many Servicos to update.
     */
    limit?: number
  }

  /**
   * Servico upsert
   */
  export type ServicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The filter to search for the Servico to update in case it exists.
     */
    where: ServicoWhereUniqueInput
    /**
     * In case the Servico found by the `where` argument doesn't exist, create a new Servico with this data.
     */
    create: XOR<ServicoCreateInput, ServicoUncheckedCreateInput>
    /**
     * In case the Servico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicoUpdateInput, ServicoUncheckedUpdateInput>
  }

  /**
   * Servico delete
   */
  export type ServicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter which Servico to delete.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico deleteMany
   */
  export type ServicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicos to delete
     */
    where?: ServicoWhereInput
    /**
     * Limit how many Servicos to delete.
     */
    limit?: number
  }

  /**
   * Servico.registros
   */
  export type Servico$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Servico without action
   */
  export type ServicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
  }


  /**
   * Model Registro
   */

  export type AggregateRegistro = {
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  export type RegistroAvgAggregateOutputType = {
    id: number | null
    producao: number | null
    preco: number | null
    total: number | null
    trabalhadorId: number | null
    fazendaId: number | null
    servicoId: number | null
  }

  export type RegistroSumAggregateOutputType = {
    id: number | null
    producao: number | null
    preco: number | null
    total: number | null
    trabalhadorId: number | null
    fazendaId: number | null
    servicoId: number | null
  }

  export type RegistroMinAggregateOutputType = {
    id: number | null
    producao: number | null
    preco: number | null
    total: number | null
    data: Date | null
    trabalhadorId: number | null
    fazendaId: number | null
    servicoId: number | null
  }

  export type RegistroMaxAggregateOutputType = {
    id: number | null
    producao: number | null
    preco: number | null
    total: number | null
    data: Date | null
    trabalhadorId: number | null
    fazendaId: number | null
    servicoId: number | null
  }

  export type RegistroCountAggregateOutputType = {
    id: number
    producao: number
    preco: number
    total: number
    data: number
    trabalhadorId: number
    fazendaId: number
    servicoId: number
    _all: number
  }


  export type RegistroAvgAggregateInputType = {
    id?: true
    producao?: true
    preco?: true
    total?: true
    trabalhadorId?: true
    fazendaId?: true
    servicoId?: true
  }

  export type RegistroSumAggregateInputType = {
    id?: true
    producao?: true
    preco?: true
    total?: true
    trabalhadorId?: true
    fazendaId?: true
    servicoId?: true
  }

  export type RegistroMinAggregateInputType = {
    id?: true
    producao?: true
    preco?: true
    total?: true
    data?: true
    trabalhadorId?: true
    fazendaId?: true
    servicoId?: true
  }

  export type RegistroMaxAggregateInputType = {
    id?: true
    producao?: true
    preco?: true
    total?: true
    data?: true
    trabalhadorId?: true
    fazendaId?: true
    servicoId?: true
  }

  export type RegistroCountAggregateInputType = {
    id?: true
    producao?: true
    preco?: true
    total?: true
    data?: true
    trabalhadorId?: true
    fazendaId?: true
    servicoId?: true
    _all?: true
  }

  export type RegistroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registro to aggregate.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registros
    **/
    _count?: true | RegistroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroMaxAggregateInputType
  }

  export type GetRegistroAggregateType<T extends RegistroAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistro[P]>
      : GetScalarType<T[P], AggregateRegistro[P]>
  }




  export type RegistroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithAggregationInput | RegistroOrderByWithAggregationInput[]
    by: RegistroScalarFieldEnum[] | RegistroScalarFieldEnum
    having?: RegistroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroCountAggregateInputType | true
    _avg?: RegistroAvgAggregateInputType
    _sum?: RegistroSumAggregateInputType
    _min?: RegistroMinAggregateInputType
    _max?: RegistroMaxAggregateInputType
  }

  export type RegistroGroupByOutputType = {
    id: number
    producao: number
    preco: number
    total: number
    data: Date
    trabalhadorId: number
    fazendaId: number
    servicoId: number
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  type GetRegistroGroupByPayload<T extends RegistroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroGroupByOutputType[P]>
        }
      >
    >


  export type RegistroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    producao?: boolean
    preco?: boolean
    total?: boolean
    data?: boolean
    trabalhadorId?: boolean
    fazendaId?: boolean
    servicoId?: boolean
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    producao?: boolean
    preco?: boolean
    total?: boolean
    data?: boolean
    trabalhadorId?: boolean
    fazendaId?: boolean
    servicoId?: boolean
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    producao?: boolean
    preco?: boolean
    total?: boolean
    data?: boolean
    trabalhadorId?: boolean
    fazendaId?: boolean
    servicoId?: boolean
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectScalar = {
    id?: boolean
    producao?: boolean
    preco?: boolean
    total?: boolean
    data?: boolean
    trabalhadorId?: boolean
    fazendaId?: boolean
    servicoId?: boolean
  }

  export type RegistroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "producao" | "preco" | "total" | "data" | "trabalhadorId" | "fazendaId" | "servicoId", ExtArgs["result"]["registro"]>
  export type RegistroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }
  export type RegistroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }
  export type RegistroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trabalhador?: boolean | TrabalhadorDefaultArgs<ExtArgs>
    fazenda?: boolean | FazendaDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }

  export type $RegistroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Registro"
    objects: {
      trabalhador: Prisma.$TrabalhadorPayload<ExtArgs>
      fazenda: Prisma.$FazendaPayload<ExtArgs>
      servico: Prisma.$ServicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      producao: number
      preco: number
      total: number
      data: Date
      trabalhadorId: number
      fazendaId: number
      servicoId: number
    }, ExtArgs["result"]["registro"]>
    composites: {}
  }

  type RegistroGetPayload<S extends boolean | null | undefined | RegistroDefaultArgs> = $Result.GetResult<Prisma.$RegistroPayload, S>

  type RegistroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegistroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistroCountAggregateInputType | true
    }

  export interface RegistroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registro'], meta: { name: 'Registro' } }
    /**
     * Find zero or one Registro that matches the filter.
     * @param {RegistroFindUniqueArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistroFindUniqueArgs>(args: SelectSubset<T, RegistroFindUniqueArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegistroFindUniqueOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistroFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistroFindFirstArgs>(args?: SelectSubset<T, RegistroFindFirstArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistroFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistroFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registros
     * const registros = await prisma.registro.findMany()
     * 
     * // Get first 10 Registros
     * const registros = await prisma.registro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroWithIdOnly = await prisma.registro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistroFindManyArgs>(args?: SelectSubset<T, RegistroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registro.
     * @param {RegistroCreateArgs} args - Arguments to create a Registro.
     * @example
     * // Create one Registro
     * const Registro = await prisma.registro.create({
     *   data: {
     *     // ... data to create a Registro
     *   }
     * })
     * 
     */
    create<T extends RegistroCreateArgs>(args: SelectSubset<T, RegistroCreateArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registros.
     * @param {RegistroCreateManyArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistroCreateManyArgs>(args?: SelectSubset<T, RegistroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registros and returns the data saved in the database.
     * @param {RegistroCreateManyAndReturnArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistroCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Registro.
     * @param {RegistroDeleteArgs} args - Arguments to delete one Registro.
     * @example
     * // Delete one Registro
     * const Registro = await prisma.registro.delete({
     *   where: {
     *     // ... filter to delete one Registro
     *   }
     * })
     * 
     */
    delete<T extends RegistroDeleteArgs>(args: SelectSubset<T, RegistroDeleteArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registro.
     * @param {RegistroUpdateArgs} args - Arguments to update one Registro.
     * @example
     * // Update one Registro
     * const registro = await prisma.registro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistroUpdateArgs>(args: SelectSubset<T, RegistroUpdateArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registros.
     * @param {RegistroDeleteManyArgs} args - Arguments to filter Registros to delete.
     * @example
     * // Delete a few Registros
     * const { count } = await prisma.registro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistroDeleteManyArgs>(args?: SelectSubset<T, RegistroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistroUpdateManyArgs>(args: SelectSubset<T, RegistroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros and returns the data updated in the database.
     * @param {RegistroUpdateManyAndReturnArgs} args - Arguments to update many Registros.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegistroUpdateManyAndReturnArgs>(args: SelectSubset<T, RegistroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Registro.
     * @param {RegistroUpsertArgs} args - Arguments to update or create a Registro.
     * @example
     * // Update or create a Registro
     * const registro = await prisma.registro.upsert({
     *   create: {
     *     // ... data to create a Registro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registro we want to update
     *   }
     * })
     */
    upsert<T extends RegistroUpsertArgs>(args: SelectSubset<T, RegistroUpsertArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCountArgs} args - Arguments to filter Registros to count.
     * @example
     * // Count the number of Registros
     * const count = await prisma.registro.count({
     *   where: {
     *     // ... the filter for the Registros we want to count
     *   }
     * })
    **/
    count<T extends RegistroCountArgs>(
      args?: Subset<T, RegistroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroAggregateArgs>(args: Subset<T, RegistroAggregateArgs>): Prisma.PrismaPromise<GetRegistroAggregateType<T>>

    /**
     * Group by Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistroGroupByArgs['orderBy'] }
        : { orderBy?: RegistroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registro model
   */
  readonly fields: RegistroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trabalhador<T extends TrabalhadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrabalhadorDefaultArgs<ExtArgs>>): Prisma__TrabalhadorClient<$Result.GetResult<Prisma.$TrabalhadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fazenda<T extends FazendaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FazendaDefaultArgs<ExtArgs>>): Prisma__FazendaClient<$Result.GetResult<Prisma.$FazendaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    servico<T extends ServicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicoDefaultArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Registro model
   */
  interface RegistroFieldRefs {
    readonly id: FieldRef<"Registro", 'Int'>
    readonly producao: FieldRef<"Registro", 'Float'>
    readonly preco: FieldRef<"Registro", 'Float'>
    readonly total: FieldRef<"Registro", 'Float'>
    readonly data: FieldRef<"Registro", 'DateTime'>
    readonly trabalhadorId: FieldRef<"Registro", 'Int'>
    readonly fazendaId: FieldRef<"Registro", 'Int'>
    readonly servicoId: FieldRef<"Registro", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Registro findUnique
   */
  export type RegistroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findUniqueOrThrow
   */
  export type RegistroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findFirst
   */
  export type RegistroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findFirstOrThrow
   */
  export type RegistroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findMany
   */
  export type RegistroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registros to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro create
   */
  export type RegistroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to create a Registro.
     */
    data: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
  }

  /**
   * Registro createMany
   */
  export type RegistroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
  }

  /**
   * Registro createManyAndReturn
   */
  export type RegistroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registro update
   */
  export type RegistroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to update a Registro.
     */
    data: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
    /**
     * Choose, which Registro to update.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro updateMany
   */
  export type RegistroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registros.
     */
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyInput>
    /**
     * Filter which Registros to update
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to update.
     */
    limit?: number
  }

  /**
   * Registro updateManyAndReturn
   */
  export type RegistroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * The data used to update Registros.
     */
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyInput>
    /**
     * Filter which Registros to update
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registro upsert
   */
  export type RegistroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The filter to search for the Registro to update in case it exists.
     */
    where: RegistroWhereUniqueInput
    /**
     * In case the Registro found by the `where` argument doesn't exist, create a new Registro with this data.
     */
    create: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
    /**
     * In case the Registro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
  }

  /**
   * Registro delete
   */
  export type RegistroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter which Registro to delete.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro deleteMany
   */
  export type RegistroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registros to delete
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to delete.
     */
    limit?: number
  }

  /**
   * Registro without action
   */
  export type RegistroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TrabalhadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type TrabalhadorScalarFieldEnum = (typeof TrabalhadorScalarFieldEnum)[keyof typeof TrabalhadorScalarFieldEnum]


  export const FazendaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type FazendaScalarFieldEnum = (typeof FazendaScalarFieldEnum)[keyof typeof FazendaScalarFieldEnum]


  export const ServicoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type ServicoScalarFieldEnum = (typeof ServicoScalarFieldEnum)[keyof typeof ServicoScalarFieldEnum]


  export const RegistroScalarFieldEnum: {
    id: 'id',
    producao: 'producao',
    preco: 'preco',
    total: 'total',
    data: 'data',
    trabalhadorId: 'trabalhadorId',
    fazendaId: 'fazendaId',
    servicoId: 'servicoId'
  };

  export type RegistroScalarFieldEnum = (typeof RegistroScalarFieldEnum)[keyof typeof RegistroScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type TrabalhadorWhereInput = {
    AND?: TrabalhadorWhereInput | TrabalhadorWhereInput[]
    OR?: TrabalhadorWhereInput[]
    NOT?: TrabalhadorWhereInput | TrabalhadorWhereInput[]
    id?: IntFilter<"Trabalhador"> | number
    nome?: StringFilter<"Trabalhador"> | string
    registros?: RegistroListRelationFilter
  }

  export type TrabalhadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type TrabalhadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: TrabalhadorWhereInput | TrabalhadorWhereInput[]
    OR?: TrabalhadorWhereInput[]
    NOT?: TrabalhadorWhereInput | TrabalhadorWhereInput[]
    registros?: RegistroListRelationFilter
  }, "id" | "nome">

  export type TrabalhadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: TrabalhadorCountOrderByAggregateInput
    _avg?: TrabalhadorAvgOrderByAggregateInput
    _max?: TrabalhadorMaxOrderByAggregateInput
    _min?: TrabalhadorMinOrderByAggregateInput
    _sum?: TrabalhadorSumOrderByAggregateInput
  }

  export type TrabalhadorScalarWhereWithAggregatesInput = {
    AND?: TrabalhadorScalarWhereWithAggregatesInput | TrabalhadorScalarWhereWithAggregatesInput[]
    OR?: TrabalhadorScalarWhereWithAggregatesInput[]
    NOT?: TrabalhadorScalarWhereWithAggregatesInput | TrabalhadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Trabalhador"> | number
    nome?: StringWithAggregatesFilter<"Trabalhador"> | string
  }

  export type FazendaWhereInput = {
    AND?: FazendaWhereInput | FazendaWhereInput[]
    OR?: FazendaWhereInput[]
    NOT?: FazendaWhereInput | FazendaWhereInput[]
    id?: IntFilter<"Fazenda"> | number
    nome?: StringFilter<"Fazenda"> | string
    registros?: RegistroListRelationFilter
  }

  export type FazendaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type FazendaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: FazendaWhereInput | FazendaWhereInput[]
    OR?: FazendaWhereInput[]
    NOT?: FazendaWhereInput | FazendaWhereInput[]
    registros?: RegistroListRelationFilter
  }, "id" | "nome">

  export type FazendaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: FazendaCountOrderByAggregateInput
    _avg?: FazendaAvgOrderByAggregateInput
    _max?: FazendaMaxOrderByAggregateInput
    _min?: FazendaMinOrderByAggregateInput
    _sum?: FazendaSumOrderByAggregateInput
  }

  export type FazendaScalarWhereWithAggregatesInput = {
    AND?: FazendaScalarWhereWithAggregatesInput | FazendaScalarWhereWithAggregatesInput[]
    OR?: FazendaScalarWhereWithAggregatesInput[]
    NOT?: FazendaScalarWhereWithAggregatesInput | FazendaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fazenda"> | number
    nome?: StringWithAggregatesFilter<"Fazenda"> | string
  }

  export type ServicoWhereInput = {
    AND?: ServicoWhereInput | ServicoWhereInput[]
    OR?: ServicoWhereInput[]
    NOT?: ServicoWhereInput | ServicoWhereInput[]
    id?: IntFilter<"Servico"> | number
    nome?: StringFilter<"Servico"> | string
    registros?: RegistroListRelationFilter
  }

  export type ServicoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type ServicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: ServicoWhereInput | ServicoWhereInput[]
    OR?: ServicoWhereInput[]
    NOT?: ServicoWhereInput | ServicoWhereInput[]
    registros?: RegistroListRelationFilter
  }, "id" | "nome">

  export type ServicoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: ServicoCountOrderByAggregateInput
    _avg?: ServicoAvgOrderByAggregateInput
    _max?: ServicoMaxOrderByAggregateInput
    _min?: ServicoMinOrderByAggregateInput
    _sum?: ServicoSumOrderByAggregateInput
  }

  export type ServicoScalarWhereWithAggregatesInput = {
    AND?: ServicoScalarWhereWithAggregatesInput | ServicoScalarWhereWithAggregatesInput[]
    OR?: ServicoScalarWhereWithAggregatesInput[]
    NOT?: ServicoScalarWhereWithAggregatesInput | ServicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Servico"> | number
    nome?: StringWithAggregatesFilter<"Servico"> | string
  }

  export type RegistroWhereInput = {
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    id?: IntFilter<"Registro"> | number
    producao?: FloatFilter<"Registro"> | number
    preco?: FloatFilter<"Registro"> | number
    total?: FloatFilter<"Registro"> | number
    data?: DateTimeFilter<"Registro"> | Date | string
    trabalhadorId?: IntFilter<"Registro"> | number
    fazendaId?: IntFilter<"Registro"> | number
    servicoId?: IntFilter<"Registro"> | number
    trabalhador?: XOR<TrabalhadorScalarRelationFilter, TrabalhadorWhereInput>
    fazenda?: XOR<FazendaScalarRelationFilter, FazendaWhereInput>
    servico?: XOR<ServicoScalarRelationFilter, ServicoWhereInput>
  }

  export type RegistroOrderByWithRelationInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    data?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
    trabalhador?: TrabalhadorOrderByWithRelationInput
    fazenda?: FazendaOrderByWithRelationInput
    servico?: ServicoOrderByWithRelationInput
  }

  export type RegistroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    producao?: FloatFilter<"Registro"> | number
    preco?: FloatFilter<"Registro"> | number
    total?: FloatFilter<"Registro"> | number
    data?: DateTimeFilter<"Registro"> | Date | string
    trabalhadorId?: IntFilter<"Registro"> | number
    fazendaId?: IntFilter<"Registro"> | number
    servicoId?: IntFilter<"Registro"> | number
    trabalhador?: XOR<TrabalhadorScalarRelationFilter, TrabalhadorWhereInput>
    fazenda?: XOR<FazendaScalarRelationFilter, FazendaWhereInput>
    servico?: XOR<ServicoScalarRelationFilter, ServicoWhereInput>
  }, "id">

  export type RegistroOrderByWithAggregationInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    data?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
    _count?: RegistroCountOrderByAggregateInput
    _avg?: RegistroAvgOrderByAggregateInput
    _max?: RegistroMaxOrderByAggregateInput
    _min?: RegistroMinOrderByAggregateInput
    _sum?: RegistroSumOrderByAggregateInput
  }

  export type RegistroScalarWhereWithAggregatesInput = {
    AND?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    OR?: RegistroScalarWhereWithAggregatesInput[]
    NOT?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Registro"> | number
    producao?: FloatWithAggregatesFilter<"Registro"> | number
    preco?: FloatWithAggregatesFilter<"Registro"> | number
    total?: FloatWithAggregatesFilter<"Registro"> | number
    data?: DateTimeWithAggregatesFilter<"Registro"> | Date | string
    trabalhadorId?: IntWithAggregatesFilter<"Registro"> | number
    fazendaId?: IntWithAggregatesFilter<"Registro"> | number
    servicoId?: IntWithAggregatesFilter<"Registro"> | number
  }

  export type TrabalhadorCreateInput = {
    nome: string
    registros?: RegistroCreateNestedManyWithoutTrabalhadorInput
  }

  export type TrabalhadorUncheckedCreateInput = {
    id?: number
    nome: string
    registros?: RegistroUncheckedCreateNestedManyWithoutTrabalhadorInput
  }

  export type TrabalhadorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUpdateManyWithoutTrabalhadorNestedInput
  }

  export type TrabalhadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUncheckedUpdateManyWithoutTrabalhadorNestedInput
  }

  export type TrabalhadorCreateManyInput = {
    id?: number
    nome: string
  }

  export type TrabalhadorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TrabalhadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FazendaCreateInput = {
    nome: string
    registros?: RegistroCreateNestedManyWithoutFazendaInput
  }

  export type FazendaUncheckedCreateInput = {
    id?: number
    nome: string
    registros?: RegistroUncheckedCreateNestedManyWithoutFazendaInput
  }

  export type FazendaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUpdateManyWithoutFazendaNestedInput
  }

  export type FazendaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUncheckedUpdateManyWithoutFazendaNestedInput
  }

  export type FazendaCreateManyInput = {
    id?: number
    nome: string
  }

  export type FazendaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FazendaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ServicoCreateInput = {
    nome: string
    registros?: RegistroCreateNestedManyWithoutServicoInput
  }

  export type ServicoUncheckedCreateInput = {
    id?: number
    nome: string
    registros?: RegistroUncheckedCreateNestedManyWithoutServicoInput
  }

  export type ServicoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUpdateManyWithoutServicoNestedInput
  }

  export type ServicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    registros?: RegistroUncheckedUpdateManyWithoutServicoNestedInput
  }

  export type ServicoCreateManyInput = {
    id?: number
    nome: string
  }

  export type ServicoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ServicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type RegistroCreateInput = {
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhador: TrabalhadorCreateNestedOneWithoutRegistrosInput
    fazenda: FazendaCreateNestedOneWithoutRegistrosInput
    servico: ServicoCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    fazendaId: number
    servicoId: number
  }

  export type RegistroUpdateInput = {
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhador?: TrabalhadorUpdateOneRequiredWithoutRegistrosNestedInput
    fazenda?: FazendaUpdateOneRequiredWithoutRegistrosNestedInput
    servico?: ServicoUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    fazendaId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroCreateManyInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    fazendaId: number
    servicoId: number
  }

  export type RegistroUpdateManyMutationInput = {
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    fazendaId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RegistroListRelationFilter = {
    every?: RegistroWhereInput
    some?: RegistroWhereInput
    none?: RegistroWhereInput
  }

  export type RegistroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrabalhadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TrabalhadorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TrabalhadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TrabalhadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TrabalhadorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FazendaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FazendaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FazendaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FazendaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type FazendaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServicoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ServicoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServicoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ServicoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ServicoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TrabalhadorScalarRelationFilter = {
    is?: TrabalhadorWhereInput
    isNot?: TrabalhadorWhereInput
  }

  export type FazendaScalarRelationFilter = {
    is?: FazendaWhereInput
    isNot?: FazendaWhereInput
  }

  export type ServicoScalarRelationFilter = {
    is?: ServicoWhereInput
    isNot?: ServicoWhereInput
  }

  export type RegistroCountOrderByAggregateInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    data?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
  }

  export type RegistroAvgOrderByAggregateInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
  }

  export type RegistroMaxOrderByAggregateInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    data?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
  }

  export type RegistroMinOrderByAggregateInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    data?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
  }

  export type RegistroSumOrderByAggregateInput = {
    id?: SortOrder
    producao?: SortOrder
    preco?: SortOrder
    total?: SortOrder
    trabalhadorId?: SortOrder
    fazendaId?: SortOrder
    servicoId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RegistroCreateNestedManyWithoutTrabalhadorInput = {
    create?: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput> | RegistroCreateWithoutTrabalhadorInput[] | RegistroUncheckedCreateWithoutTrabalhadorInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutTrabalhadorInput | RegistroCreateOrConnectWithoutTrabalhadorInput[]
    createMany?: RegistroCreateManyTrabalhadorInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutTrabalhadorInput = {
    create?: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput> | RegistroCreateWithoutTrabalhadorInput[] | RegistroUncheckedCreateWithoutTrabalhadorInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutTrabalhadorInput | RegistroCreateOrConnectWithoutTrabalhadorInput[]
    createMany?: RegistroCreateManyTrabalhadorInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RegistroUpdateManyWithoutTrabalhadorNestedInput = {
    create?: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput> | RegistroCreateWithoutTrabalhadorInput[] | RegistroUncheckedCreateWithoutTrabalhadorInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutTrabalhadorInput | RegistroCreateOrConnectWithoutTrabalhadorInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutTrabalhadorInput | RegistroUpsertWithWhereUniqueWithoutTrabalhadorInput[]
    createMany?: RegistroCreateManyTrabalhadorInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutTrabalhadorInput | RegistroUpdateWithWhereUniqueWithoutTrabalhadorInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutTrabalhadorInput | RegistroUpdateManyWithWhereWithoutTrabalhadorInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistroUncheckedUpdateManyWithoutTrabalhadorNestedInput = {
    create?: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput> | RegistroCreateWithoutTrabalhadorInput[] | RegistroUncheckedCreateWithoutTrabalhadorInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutTrabalhadorInput | RegistroCreateOrConnectWithoutTrabalhadorInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutTrabalhadorInput | RegistroUpsertWithWhereUniqueWithoutTrabalhadorInput[]
    createMany?: RegistroCreateManyTrabalhadorInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutTrabalhadorInput | RegistroUpdateWithWhereUniqueWithoutTrabalhadorInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutTrabalhadorInput | RegistroUpdateManyWithWhereWithoutTrabalhadorInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroCreateNestedManyWithoutFazendaInput = {
    create?: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput> | RegistroCreateWithoutFazendaInput[] | RegistroUncheckedCreateWithoutFazendaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutFazendaInput | RegistroCreateOrConnectWithoutFazendaInput[]
    createMany?: RegistroCreateManyFazendaInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutFazendaInput = {
    create?: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput> | RegistroCreateWithoutFazendaInput[] | RegistroUncheckedCreateWithoutFazendaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutFazendaInput | RegistroCreateOrConnectWithoutFazendaInput[]
    createMany?: RegistroCreateManyFazendaInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUpdateManyWithoutFazendaNestedInput = {
    create?: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput> | RegistroCreateWithoutFazendaInput[] | RegistroUncheckedCreateWithoutFazendaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutFazendaInput | RegistroCreateOrConnectWithoutFazendaInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutFazendaInput | RegistroUpsertWithWhereUniqueWithoutFazendaInput[]
    createMany?: RegistroCreateManyFazendaInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutFazendaInput | RegistroUpdateWithWhereUniqueWithoutFazendaInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutFazendaInput | RegistroUpdateManyWithWhereWithoutFazendaInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroUncheckedUpdateManyWithoutFazendaNestedInput = {
    create?: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput> | RegistroCreateWithoutFazendaInput[] | RegistroUncheckedCreateWithoutFazendaInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutFazendaInput | RegistroCreateOrConnectWithoutFazendaInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutFazendaInput | RegistroUpsertWithWhereUniqueWithoutFazendaInput[]
    createMany?: RegistroCreateManyFazendaInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutFazendaInput | RegistroUpdateWithWhereUniqueWithoutFazendaInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutFazendaInput | RegistroUpdateManyWithWhereWithoutFazendaInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroCreateNestedManyWithoutServicoInput = {
    create?: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput> | RegistroCreateWithoutServicoInput[] | RegistroUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutServicoInput | RegistroCreateOrConnectWithoutServicoInput[]
    createMany?: RegistroCreateManyServicoInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutServicoInput = {
    create?: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput> | RegistroCreateWithoutServicoInput[] | RegistroUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutServicoInput | RegistroCreateOrConnectWithoutServicoInput[]
    createMany?: RegistroCreateManyServicoInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUpdateManyWithoutServicoNestedInput = {
    create?: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput> | RegistroCreateWithoutServicoInput[] | RegistroUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutServicoInput | RegistroCreateOrConnectWithoutServicoInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutServicoInput | RegistroUpsertWithWhereUniqueWithoutServicoInput[]
    createMany?: RegistroCreateManyServicoInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutServicoInput | RegistroUpdateWithWhereUniqueWithoutServicoInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutServicoInput | RegistroUpdateManyWithWhereWithoutServicoInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type RegistroUncheckedUpdateManyWithoutServicoNestedInput = {
    create?: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput> | RegistroCreateWithoutServicoInput[] | RegistroUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutServicoInput | RegistroCreateOrConnectWithoutServicoInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutServicoInput | RegistroUpsertWithWhereUniqueWithoutServicoInput[]
    createMany?: RegistroCreateManyServicoInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutServicoInput | RegistroUpdateWithWhereUniqueWithoutServicoInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutServicoInput | RegistroUpdateManyWithWhereWithoutServicoInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type TrabalhadorCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<TrabalhadorCreateWithoutRegistrosInput, TrabalhadorUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: TrabalhadorCreateOrConnectWithoutRegistrosInput
    connect?: TrabalhadorWhereUniqueInput
  }

  export type FazendaCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<FazendaCreateWithoutRegistrosInput, FazendaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: FazendaCreateOrConnectWithoutRegistrosInput
    connect?: FazendaWhereUniqueInput
  }

  export type ServicoCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<ServicoCreateWithoutRegistrosInput, ServicoUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: ServicoCreateOrConnectWithoutRegistrosInput
    connect?: ServicoWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TrabalhadorUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<TrabalhadorCreateWithoutRegistrosInput, TrabalhadorUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: TrabalhadorCreateOrConnectWithoutRegistrosInput
    upsert?: TrabalhadorUpsertWithoutRegistrosInput
    connect?: TrabalhadorWhereUniqueInput
    update?: XOR<XOR<TrabalhadorUpdateToOneWithWhereWithoutRegistrosInput, TrabalhadorUpdateWithoutRegistrosInput>, TrabalhadorUncheckedUpdateWithoutRegistrosInput>
  }

  export type FazendaUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<FazendaCreateWithoutRegistrosInput, FazendaUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: FazendaCreateOrConnectWithoutRegistrosInput
    upsert?: FazendaUpsertWithoutRegistrosInput
    connect?: FazendaWhereUniqueInput
    update?: XOR<XOR<FazendaUpdateToOneWithWhereWithoutRegistrosInput, FazendaUpdateWithoutRegistrosInput>, FazendaUncheckedUpdateWithoutRegistrosInput>
  }

  export type ServicoUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<ServicoCreateWithoutRegistrosInput, ServicoUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: ServicoCreateOrConnectWithoutRegistrosInput
    upsert?: ServicoUpsertWithoutRegistrosInput
    connect?: ServicoWhereUniqueInput
    update?: XOR<XOR<ServicoUpdateToOneWithWhereWithoutRegistrosInput, ServicoUpdateWithoutRegistrosInput>, ServicoUncheckedUpdateWithoutRegistrosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RegistroCreateWithoutTrabalhadorInput = {
    producao: number
    preco: number
    total: number
    data?: Date | string
    fazenda: FazendaCreateNestedOneWithoutRegistrosInput
    servico: ServicoCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutTrabalhadorInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    fazendaId: number
    servicoId: number
  }

  export type RegistroCreateOrConnectWithoutTrabalhadorInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput>
  }

  export type RegistroCreateManyTrabalhadorInputEnvelope = {
    data: RegistroCreateManyTrabalhadorInput | RegistroCreateManyTrabalhadorInput[]
  }

  export type RegistroUpsertWithWhereUniqueWithoutTrabalhadorInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutTrabalhadorInput, RegistroUncheckedUpdateWithoutTrabalhadorInput>
    create: XOR<RegistroCreateWithoutTrabalhadorInput, RegistroUncheckedCreateWithoutTrabalhadorInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutTrabalhadorInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutTrabalhadorInput, RegistroUncheckedUpdateWithoutTrabalhadorInput>
  }

  export type RegistroUpdateManyWithWhereWithoutTrabalhadorInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutTrabalhadorInput>
  }

  export type RegistroScalarWhereInput = {
    AND?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    OR?: RegistroScalarWhereInput[]
    NOT?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    id?: IntFilter<"Registro"> | number
    producao?: FloatFilter<"Registro"> | number
    preco?: FloatFilter<"Registro"> | number
    total?: FloatFilter<"Registro"> | number
    data?: DateTimeFilter<"Registro"> | Date | string
    trabalhadorId?: IntFilter<"Registro"> | number
    fazendaId?: IntFilter<"Registro"> | number
    servicoId?: IntFilter<"Registro"> | number
  }

  export type RegistroCreateWithoutFazendaInput = {
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhador: TrabalhadorCreateNestedOneWithoutRegistrosInput
    servico: ServicoCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutFazendaInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    servicoId: number
  }

  export type RegistroCreateOrConnectWithoutFazendaInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput>
  }

  export type RegistroCreateManyFazendaInputEnvelope = {
    data: RegistroCreateManyFazendaInput | RegistroCreateManyFazendaInput[]
  }

  export type RegistroUpsertWithWhereUniqueWithoutFazendaInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutFazendaInput, RegistroUncheckedUpdateWithoutFazendaInput>
    create: XOR<RegistroCreateWithoutFazendaInput, RegistroUncheckedCreateWithoutFazendaInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutFazendaInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutFazendaInput, RegistroUncheckedUpdateWithoutFazendaInput>
  }

  export type RegistroUpdateManyWithWhereWithoutFazendaInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutFazendaInput>
  }

  export type RegistroCreateWithoutServicoInput = {
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhador: TrabalhadorCreateNestedOneWithoutRegistrosInput
    fazenda: FazendaCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutServicoInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    fazendaId: number
  }

  export type RegistroCreateOrConnectWithoutServicoInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput>
  }

  export type RegistroCreateManyServicoInputEnvelope = {
    data: RegistroCreateManyServicoInput | RegistroCreateManyServicoInput[]
  }

  export type RegistroUpsertWithWhereUniqueWithoutServicoInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutServicoInput, RegistroUncheckedUpdateWithoutServicoInput>
    create: XOR<RegistroCreateWithoutServicoInput, RegistroUncheckedCreateWithoutServicoInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutServicoInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutServicoInput, RegistroUncheckedUpdateWithoutServicoInput>
  }

  export type RegistroUpdateManyWithWhereWithoutServicoInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutServicoInput>
  }

  export type TrabalhadorCreateWithoutRegistrosInput = {
    nome: string
  }

  export type TrabalhadorUncheckedCreateWithoutRegistrosInput = {
    id?: number
    nome: string
  }

  export type TrabalhadorCreateOrConnectWithoutRegistrosInput = {
    where: TrabalhadorWhereUniqueInput
    create: XOR<TrabalhadorCreateWithoutRegistrosInput, TrabalhadorUncheckedCreateWithoutRegistrosInput>
  }

  export type FazendaCreateWithoutRegistrosInput = {
    nome: string
  }

  export type FazendaUncheckedCreateWithoutRegistrosInput = {
    id?: number
    nome: string
  }

  export type FazendaCreateOrConnectWithoutRegistrosInput = {
    where: FazendaWhereUniqueInput
    create: XOR<FazendaCreateWithoutRegistrosInput, FazendaUncheckedCreateWithoutRegistrosInput>
  }

  export type ServicoCreateWithoutRegistrosInput = {
    nome: string
  }

  export type ServicoUncheckedCreateWithoutRegistrosInput = {
    id?: number
    nome: string
  }

  export type ServicoCreateOrConnectWithoutRegistrosInput = {
    where: ServicoWhereUniqueInput
    create: XOR<ServicoCreateWithoutRegistrosInput, ServicoUncheckedCreateWithoutRegistrosInput>
  }

  export type TrabalhadorUpsertWithoutRegistrosInput = {
    update: XOR<TrabalhadorUpdateWithoutRegistrosInput, TrabalhadorUncheckedUpdateWithoutRegistrosInput>
    create: XOR<TrabalhadorCreateWithoutRegistrosInput, TrabalhadorUncheckedCreateWithoutRegistrosInput>
    where?: TrabalhadorWhereInput
  }

  export type TrabalhadorUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: TrabalhadorWhereInput
    data: XOR<TrabalhadorUpdateWithoutRegistrosInput, TrabalhadorUncheckedUpdateWithoutRegistrosInput>
  }

  export type TrabalhadorUpdateWithoutRegistrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TrabalhadorUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FazendaUpsertWithoutRegistrosInput = {
    update: XOR<FazendaUpdateWithoutRegistrosInput, FazendaUncheckedUpdateWithoutRegistrosInput>
    create: XOR<FazendaCreateWithoutRegistrosInput, FazendaUncheckedCreateWithoutRegistrosInput>
    where?: FazendaWhereInput
  }

  export type FazendaUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: FazendaWhereInput
    data: XOR<FazendaUpdateWithoutRegistrosInput, FazendaUncheckedUpdateWithoutRegistrosInput>
  }

  export type FazendaUpdateWithoutRegistrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type FazendaUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ServicoUpsertWithoutRegistrosInput = {
    update: XOR<ServicoUpdateWithoutRegistrosInput, ServicoUncheckedUpdateWithoutRegistrosInput>
    create: XOR<ServicoCreateWithoutRegistrosInput, ServicoUncheckedCreateWithoutRegistrosInput>
    where?: ServicoWhereInput
  }

  export type ServicoUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: ServicoWhereInput
    data: XOR<ServicoUpdateWithoutRegistrosInput, ServicoUncheckedUpdateWithoutRegistrosInput>
  }

  export type ServicoUpdateWithoutRegistrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ServicoUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type RegistroCreateManyTrabalhadorInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    fazendaId: number
    servicoId: number
  }

  export type RegistroUpdateWithoutTrabalhadorInput = {
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fazenda?: FazendaUpdateOneRequiredWithoutRegistrosNestedInput
    servico?: ServicoUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutTrabalhadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fazendaId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroUncheckedUpdateManyWithoutTrabalhadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fazendaId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroCreateManyFazendaInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    servicoId: number
  }

  export type RegistroUpdateWithoutFazendaInput = {
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhador?: TrabalhadorUpdateOneRequiredWithoutRegistrosNestedInput
    servico?: ServicoUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutFazendaInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroUncheckedUpdateManyWithoutFazendaInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    servicoId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroCreateManyServicoInput = {
    id?: number
    producao: number
    preco: number
    total: number
    data?: Date | string
    trabalhadorId: number
    fazendaId: number
  }

  export type RegistroUpdateWithoutServicoInput = {
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhador?: TrabalhadorUpdateOneRequiredWithoutRegistrosNestedInput
    fazenda?: FazendaUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutServicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    fazendaId?: IntFieldUpdateOperationsInput | number
  }

  export type RegistroUncheckedUpdateManyWithoutServicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    producao?: FloatFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    trabalhadorId?: IntFieldUpdateOperationsInput | number
    fazendaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}